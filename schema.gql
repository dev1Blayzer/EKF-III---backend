# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

# The information for a job ticket
type Job {
  # The address of the job
  address: String!
  customer: String
  id: ID!

  # The primary phone number to contact for the job
  phone: String
  user: User!
}

# Editable job data
input JobInput {
  customer: String
}

# The default input to use for all list queries
input ListQueryInput {
  # The ID of the first result from the current
  back: String

  # The number of results to return
  limit: Float

  # The ID of the last result from the current page
  next: String

  # Order the list of results by this field
  orderBy: String

  # The directions to order the results
  orderDirection: String

  # Where a list of values for a column contains a value
  whereArrayContains: String

  # Where a column value is any of array of values
  whereArrayContainsAny: String

  # Where a column matches a value
  whereEqual: String

  # Where a column is greater than a value
  whereGreaterThan: String

  # Where a column is greater than or equal to a value
  whereGreaterThanOrEqual: String

  # Where a column value is in an array of values
  whereIn: String

  # Where a column is less than a value
  whereLessThan: String

  # Where a column is less than or equal to a value
  whereLessThanOrEqual: String
}

# The information for an event logged on the system
type Log {
  # When the log was created
  createdAt: String

  # Who created the log
  createdBy: User
  id: ID!

  # The input data sent to the endpoint
  input: String

  # The name of the endpoint being accessed or event being responded to
  name: String!

  # The output data returned to the endpoint
  output: String

  # The URL of the page that called out to the API
  referrer: String!

  # The amount of time it took the functionality to run
  resolveTime: Float!

  # The type of log
  type: String!
}

# The information for a migration
type Migration {
  createdAt: DateTime
  id: ID!
}

type Mutation {
  addJob(
    # Add a new Job document to the Jobs collection.
    data: JobInput!
  ): Job!
  addPlaces(
    # Add a new Places document to the Places collection.
    data: PlacesInput!
  ): Places!
  addSpecials(
    # Add a new Specials document to the Specials collection.
    data: SpecialsInput!
  ): Specials!
  addUser(
    # Add a new User document to the Users collection.
    data: UserInput!
  ): User!
  addUsers(
    # Add a new Users document to the Users collection.
    data: UsersInput!
  ): Users!
  deleteJob(
    # The ID of the Job document being deleted in the Jobs collection
    id: String!
  ): Job!
  deletePlaces(
    # The ID of the Places document being deleted in the Places collection
    id: String!
  ): Places!
  deleteSpecials(
    # The ID of the Specials document being deleted in the Specials collection
    id: String!
  ): Specials!
  deleteUser(
    # The ID of the User document being deleted in the Users collection
    id: String!
  ): User!
  deleteUsers(
    # The ID of the Users document being deleted in the Users collection
    id: String!
  ): Users!
  editJob(
    # Update a Job document in the Jobs collection.
    data: JobInput!

    # The ID of the Job document in the Jobs collection
    id: String!
  ): Job!
  editPlaces(
    # Update a Places document in the Places collection.
    data: PlacesInput!

    # The ID of the Places document in the Places collection
    id: String!
  ): Places!
  editSpecials(
    # Update a Specials document in the Specials collection.
    data: SpecialsInput!

    # The ID of the Specials document in the Specials collection
    id: String!
  ): Specials!
  editUser(
    # Update a User document in the Users collection.
    data: UserInput!

    # The ID of the User document in the Users collection
    id: String!
  ): User!
  editUsers(
    # Update a Users document in the Users collection.
    data: UsersInput!

    # The ID of the Users document in the Users collection
    id: String!
  ): Users!
  tieUserToJob(data: TieUserToJobInput!): Job!
}

# The information for a Places document
type Places {
  id: ID!

  # The name of the Places
  name: String!
}

# Editable Places data
input PlacesInput {
  name: String!
}

type Query {
  # Get a specific Job document from the Jobs collection.
  job(id: String!): Job

  # Get a list of Job documents from the Jobs collection.
  jobs(data: ListQueryInput): [Job!]

  # Get a specific Log document from the Logs collection.
  log(id: String!): Log

  # Get a list of Log documents from the Logs collection.
  logs(data: ListQueryInput): [Log!]

  # Get a specific Migration document from the Migrations collection.
  migration(id: String!): Migration

  # Get a list of Migration documents from the Migrations collection.
  migrations(data: ListQueryInput): [Migration!]

  # Get a list of Places documents from the Places collection.
  places(data: ListQueryInput, id: String!): [Places!]

  # Get a list of Specials documents from the Specials collection.
  specials(data: ListQueryInput, id: String!): [Specials!]

  # Get a specific User document from the Users collection.
  user(id: String!): User

  # Get a list of Users documents from the Users collection.
  users(data: ListQueryInput, id: String!): [Users!]
}

# The information for a Specials document
type Specials {
  id: ID!

  # The name of the Specials
  name: String!
}

# Editable Specials data
input SpecialsInput {
  name: String!
}

# The id of the job and user being tied together.
input TieUserToJobInput {
  job: String!
  user: String!
}

# The information for a user
type User {
  # The user's email address
  email: String

  # The user's full name
  given_name: String
  id: ID!
  jobs: [Job!]!
}

# Editable user data
input UserInput {
  given_name: String
}

# A custom set of params to use when doing list query
input UserListQueryInput {
  # The ID of the first result from the current
  back: String
  hasEmail: Boolean

  # The number of results to return
  limit: Float

  # The ID of the last result from the current page
  next: String

  # Order the list of results by this field
  orderBy: String

  # The directions to order the results
  orderDirection: String

  # Where a list of values for a column contains a value
  whereArrayContains: String

  # Where a column value is any of array of values
  whereArrayContainsAny: String

  # Where a column matches a value
  whereEqual: String

  # Where a column is greater than a value
  whereGreaterThan: String

  # Where a column is greater than or equal to a value
  whereGreaterThanOrEqual: String

  # Where a column value is in an array of values
  whereIn: String

  # Where a column is less than a value
  whereLessThan: String

  # Where a column is less than or equal to a value
  whereLessThanOrEqual: String
}

# The information for a Users document
type Users {
  id: ID!

  # The name of the Users
  name: String!
}

# Editable Users data
input UsersInput {
  name: String!
}
